package kicode.ui;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import kicode.VirtualMachine;
import kicode.code.CodeItem;
import kicode.code.PrintTextStatement;

public class EditorWindow extends javax.swing.JFrame {

    public VirtualMachine vm;

    JFileChooser fileChooser;

    /**
     * Creates new form EditorWindow
     */
    public EditorWindow() {
        initComponents();

        variableList.setModel(new DefaultListModel<>());

        vm = new VirtualMachine(canvas.code);

        fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("KiCoDE programs", "kicode"));
        fileChooser.setAcceptAllFileFilterUsed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        addVarButton = new javax.swing.JButton();
        deleteVarButton = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        canvas = new kicode.ui.CodeCanvas();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        variableList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KiCoDE");
        setMinimumSize(new java.awt.Dimension(640, 480));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        newButton.setText("New");
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(newButton);

        loadButton.setText("Load...");
        loadButton.setFocusable(false);
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadButton);

        saveButton.setText("Save...");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        runButton.setText("Run");
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(runButton);

        addVarButton.setText("Add");
        addVarButton.setFocusable(false);
        addVarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addVarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addVarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVarButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addVarButton);

        deleteVarButton.setText("Delete");
        deleteVarButton.setFocusable(false);
        deleteVarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteVarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteVarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVarButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteVarButton);

        jSplitPane2.setDividerLocation(256);

        canvas.setLayout(new javax.swing.BoxLayout(canvas, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane1.setViewportView(canvas);

        jSplitPane2.setRightComponent(jScrollPane1);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        variableList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(variableList);

        jSplitPane1.setTopComponent(jScrollPane2);

        outputArea.setColumns(20);
        outputArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        outputArea.setForeground(new java.awt.Color(51, 51, 51));
        outputArea.setRows(5);
        jScrollPane3.setViewportView(outputArea);

        jSplitPane1.setBottomComponent(jScrollPane3);

        jSplitPane2.setLeftComponent(jSplitPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (vm.code == null) {
            vm.code = canvas.code;
        }
        vm.run();

        DefaultListModel<String> variableListModel = (DefaultListModel<String>) variableList.getModel();
        variableListModel.clear();
        vm.variables.forEach((name, value) -> variableListModel.addElement(name + ": " + value));

        outputArea.setText(vm.output);
        System.out.println(canvas.getFont());
    }//GEN-LAST:event_runButtonActionPerformed

    private void addVarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVarButtonActionPerformed
        String name = JOptionPane.showInputDialog(this, "Variable name: ");
        if (name != null) {
            try {
                String numStr = JOptionPane.showInputDialog(this, "Number: ");
                if (numStr != null) {
                    Double num = Double.parseDouble(numStr);
                    vm.setVariable(name, num);
                    ((DefaultListModel<String>) variableList.getModel()).addElement(name + ": " + num);
                }
            } catch (NumberFormatException e) {
            }
        }
    }//GEN-LAST:event_addVarButtonActionPerformed

    private void deleteVarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVarButtonActionPerformed
        String varName = variableList.getSelectedValue().split(":")[0];
        vm.variables.remove(varName);
        ((DefaultListModel<String>) variableList.getModel()).remove(variableList.getSelectedIndex());
    }//GEN-LAST:event_deleteVarButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        canvas.code.get(0).body.body.clear();
        canvas.code.get(0).body.body.add(new PrintTextStatement("Hello, World!"));
        canvas.buildUI();
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            XMLStreamWriter xsw = null;
            try {
                xsw = XMLOutputFactory.newInstance().createXMLStreamWriter(new FileWriter(file));
                xsw.writeStartDocument();

                for (var item : canvas.code) {
                    item.save(xsw);
                }

                xsw.writeEndDocument();
            } catch (IOException e) {
                System.err.println("Failed to save to file " + file.getAbsolutePath() + ": " + e.getMessage());
            } catch (XMLStreamException e) {
                System.err.println("Error in XML conversion: " + e.getMessage());
            } finally {
                try {
                    if (xsw != null) {
                        xsw.close();
                    }
                } catch (XMLStreamException e) {
                    System.err.println("Error in XML conversion: " + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String filename = file.toString();
            if (!filename.endsWith(".kicode")) {
                filename += ".kicode";
                file = new File(filename);
            }
            
            XMLStreamReader xsr = null;
            CodeItem c = null;
            try {
                xsr = XMLInputFactory.newInstance().createXMLStreamReader(new FileReader(file));
                xsr.next();
                if (xsr.getEventType() == XMLStreamReader.START_ELEMENT && xsr.getLocalName().equals("Code")) {
                    c = new CodeItem();
                    if (!c.load(xsr)) {
                        System.err.println("Loading failed!");
                    } else {
                        CodeItem[] testcode = {c};
                        canvas.code = Arrays.asList(testcode);
                        canvas.buildUI();
                        vm.code = canvas.code;
                    }
                }
            } catch (IOException ex) {
                System.err.println("Failed to load from file " + filename + ": " + ex.getMessage());
            } catch (XMLStreamException ex) {
                System.err.println("Error in XML parsing: " + ex.getMessage());
            } catch (ClassNotFoundException ex) {
                System.err.println("Invalid save file: " + ex.getMessage());
            } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException ex) {
                System.err.println("Loading error: " + ex.getMessage());
            } finally {
                try {
                    if (xsr != null) {
                        xsr.close();
                    }
                } catch (XMLStreamException e) {
                    System.err.println("Error in XML parsing: " + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVarButton;
    public kicode.ui.CodeCanvas canvas;
    private javax.swing.JButton deleteVarButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton newButton;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JList<String> variableList;
    // End of variables declaration//GEN-END:variables
}
